<?php
/**
 * ARCHIVO DE CONFIGURACI√ìN
 * Configuraci√≥n centralizada para diferentes entornos
 */

// =====================================================
// CONFIGURACI√ìN DE BASE DE DATOS
// =====================================================

// Configuraci√≥n por defecto (XAMPP est√°ndar)
$config = [
    'desarrollo' => [
        'host' => 'localhost',
        'port' => 3306,
        'dbname' => 'mesa_ayuda2',
        'username' => 'root',
        'password' => '',
        'charset' => 'utf8'
    ],
    
    // Configuraci√≥n alternativa (puerto 3307)
    'desarrollo_alt' => [
        'host' => 'localhost',
        'port' => 3307,
        'dbname' => 'mesa_ayuda2',
        'username' => 'root',
        'password' => '',
        'charset' => 'utf8'
    ],
    
    // Configuraci√≥n para producci√≥n (ejemplo)
    'produccion' => [
        'host' => 'localhost',
        'port' => 3306,
        'dbname' => 'mesa_ayuda2',
        'username' => 'usuario_prod',
        'password' => 'password_seguro',
        'charset' => 'utf8'
    ]
];

// Seleccionar entorno (cambiar seg√∫n necesidad)
$entorno = 'desarrollo'; // Cambiar a 'desarrollo_alt' si usas puerto 3307

// Funci√≥n para obtener configuraci√≥n
function getConfig($entorno = 'desarrollo') {
    global $config;
    return $config[$entorno] ?? $config['desarrollo'];
}

// Funci√≥n para crear string de conexi√≥n
function getConnectionString($config) {
    return "mysql:host={$config['host']};port={$config['port']};dbname={$config['dbname']};charset={$config['charset']}";
}

// Funci√≥n para probar conexi√≥n
function testConnection($config) {
    try {
        $dsn = getConnectionString($config);
        $pdo = new PDO($dsn, $config['username'], $config['password']);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        return ['success' => true, 'message' => "Conexi√≥n exitosa en puerto {$config['port']}", 'pdo' => $pdo];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => "Error en puerto {$config['port']}: " . $e->getMessage()];
    }
}

// Funci√≥n para conectar autom√°ticamente
function connectAuto() {
    global $config;
    
    // Probar puerto 3306 primero
    $result = testConnection($config['desarrollo']);
    if ($result['success']) {
        return $result['pdo'];
    }
    
    // Si falla, probar puerto 3307
    $result = testConnection($config['desarrollo_alt']);
    if ($result['success']) {
        return $result['pdo'];
    }
    
    // Si ambos fallan, mostrar error
    throw new Exception("No se pudo conectar a MySQL en ning√∫n puerto disponible. Verifica que MySQL est√© ejecut√°ndose.");
}

// =====================================================
// CONFIGURACI√ìN DE LA APLICACI√ìN
// =====================================================

// Configuraci√≥n general
define('APP_NAME', 'Mesa de Ayuda');
define('APP_VERSION', '2.0');
define('APP_URL', 'http://localhost/MesaAyuda_Final/');

// Configuraci√≥n de sesi√≥n
define('SESSION_TIMEOUT', 3600); // 1 hora
define('SESSION_NAME', 'MesaAyuda_Session');

// Configuraci√≥n de archivos
define('MAX_FILE_SIZE', 5 * 1024 * 1024); // 5MB
define('ALLOWED_EXTENSIONS', ['jpg', 'jpeg', 'png', 'pdf', 'doc', 'docx']);

// Configuraci√≥n de paginaci√≥n
define('ITEMS_PER_PAGE', 10);

// =====================================================
// CONFIGURACI√ìN DE SEGURIDAD
// =====================================================

// Configuraci√≥n de contrase√±as
define('MIN_PASSWORD_LENGTH', 6);
define('PASSWORD_REQUIRE_SPECIAL', false);

// Configuraci√≥n de intentos de login
define('MAX_LOGIN_ATTEMPTS', 5);
define('LOGIN_TIMEOUT', 900); // 15 minutos

// =====================================================
// CONFIGURACI√ìN DE LOGS
// =====================================================

// Habilitar logs
define('ENABLE_LOGS', true);
define('LOG_LEVEL', 'INFO'); // DEBUG, INFO, WARNING, ERROR

// =====================================================
// INFORMACI√ìN DEL SISTEMA
// =====================================================

// Detectar entorno autom√°ticamente
function detectEnvironment() {
    if (isset($_SERVER['HTTP_HOST'])) {
        if ($_SERVER['HTTP_HOST'] === 'localhost' || $_SERVER['HTTP_HOST'] === '127.0.0.1') {
            return 'desarrollo';
        } else {
            return 'produccion';
        }
    }
    return 'desarrollo';
}

// Funci√≥n para mostrar informaci√≥n de configuraci√≥n
function showConfigInfo() {
    global $config;
    $current_env = detectEnvironment();
    $current_config = getConfig($current_env);
    
    echo "<h3>üîß Informaci√≥n de Configuraci√≥n</h3>";
    echo "<strong>Entorno detectado:</strong> $current_env<br>";
    echo "<strong>Host:</strong> {$current_config['host']}<br>";
    echo "<strong>Puerto:</strong> {$current_config['port']}<br>";
    echo "<strong>Base de datos:</strong> {$current_config['dbname']}<br>";
    echo "<strong>Usuario:</strong> {$current_config['username']}<br>";
    echo "<strong>Charset:</strong> {$current_config['charset']}<br>";
}

// =====================================================
// CONFIGURACI√ìN DE PUERTOS COMUNES
// =====================================================

// Puertos comunes de MySQL
$puertos_comunes = [
    3306 => 'MySQL est√°ndar (XAMPP por defecto)',
    3307 => 'MySQL alternativo (cuando 3306 est√° ocupado)',
    3308 => 'MySQL tercer puerto',
    3309 => 'MySQL cuarto puerto'
];

// Funci√≥n para escanear puertos disponibles
function scanPorts($host = 'localhost') {
    global $puertos_comunes;
    $puertos_disponibles = [];
    
    foreach ($puertos_comunes as $puerto => $descripcion) {
        $connection = @fsockopen($host, $puerto, $errno, $errstr, 1);
        if (is_resource($connection)) {
            $puertos_disponibles[$puerto] = $descripcion;
            fclose($connection);
        }
    }
    
    return $puertos_disponibles;
}

// Funci√≥n para mostrar puertos disponibles
function showAvailablePorts() {
    $puertos = scanPorts();
    echo "<h3>üîç Puertos MySQL Disponibles</h3>";
    
    if (empty($puertos)) {
        echo "‚ùå No se detectaron puertos MySQL activos<br>";
        echo "Verifica que MySQL est√© ejecut√°ndose<br>";
    } else {
        echo "‚úÖ Puertos detectados:<br>";
        foreach ($puertos as $puerto => $descripcion) {
            echo "&nbsp;&nbsp;&nbsp;&nbsp;‚Ä¢ Puerto $puerto: $descripcion<br>";
        }
    }
}

?>
